4.1  Write out the code for the earlier sum function.

-- >>> def sum(list):
...        if list == []:
               return 0
           return list[0] + sum(list[1:])

4.2	 Write a recursive function to count the number of items in a list.

--  def counting(arr):  
        if arr == []:
            return 0
        return 1 + counting(arr[1:])

4.3	 Find the maximum number in a list.

--  max([1,2,3])

:)      

4.4 	 Remember binary search from chapter 1? It’s a divide-and-conquer
algorithm, too. Can you come up with the base case and recursive
case for binary search?

-- Base case for binary search is one item, which is then compared to each other item in the set.  If the guess is to high, then you loop back through the set, but
with the upper half of the set removed; if the guess is too low, you loop through the set with the bottom half removed.  
---

How long would each of these operations take in Big O notation?
4.5 	 Printing the value of each element in an array.

---  O(n)

4.6	 Doubling the value of each element in an array.

--- O(n)

4.7 	 Doubling the value of just the first element in an array.

--- O(1)

4.8 	 Creating a multiplication table with all the elements in the array. So
if your array is [2, 3, 7, 8, 10], you first multiply every element by 2,
then multiply every element by 3, then by 7, and so on.

--- O(n^2)
          


Which of these hash functions are consistent?
5.1	 f(x) = 1  -- Returns “1” for all input

-- Consistent

5.2	 f(x) = rand() -- Returns a random number every time

-- Not consistent

5.3	 f(x) = next_empty_slot() -- Returns the index of the next empty slot in the hash table

-- Not consistent; should return the same index for whatever I am searching, rather than go down the line giving a different result each time
5.4	 f(x) = len(x)  -- Uses the length of the string as the index 

-- consistent


It’s important for hash functions to have a good distribution. They
should map items as broadly as possible. The worst case is a hash
function that maps all items to the same slot in the hash table.
Suppose you have these four hash functions that work with strings:

a.	 Return “1” for all input.

b.	 Use the length of the string as the index.

c.	 Use the first character of the string as the index. So, all strings
starting with a are hashed together, and so on.

d.	 Map every letter to a prime number: a = 2, b = 3, c = 5, d = 7,

e = 11, and so on. For a string, the hash function is the sum of all
the characters modulo the size of the hash. For example, if your
hash size is 10, and the string is “bag”, the index is 3 + 2 + 17 %
10 = 22 % 10 = 2.

For each of these examples, which hash functions would provide a good
distribution? Assume a hash table size of 10 slots.


5.5 	 A phonebook where the keys are names and values are phone
numbers. The names are as follows: Esther, Ben, Bob, and Dan.

-- C and D

5.6 	 A mapping from battery size to power. The sizes are A, AA, AAA,
and AAAA.

-- B and D

5.7 	 A mapping from book titles to authors. The titles are Maus, Fun
Home, and Watchmen

-- B, C, D
