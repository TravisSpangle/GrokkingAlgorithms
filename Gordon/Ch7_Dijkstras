import java.util.PriorityQueue;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

// Adapted from StackOverflow discussion
// http://stackoverflow.com/questions/17480022/java-find-shortest-path-between-2-points-in-a-distance-weighted-map

class Vertex implements Comparable<Vertex>
{
    public final String name;
    public Edge[] adjacencies;
    public double minDistance = Double.POSITIVE_INFINITY;
    public Vertex previous;
    public Vertex(String argName) { name = argName; }
    public String toString() { return name; }
    public int compareTo(Vertex other)
    {
        return Double.compare(minDistance, other.minDistance);
    }
}

class Edge
{
    public final Vertex target;
    public final double weight;
    public Edge(Vertex argTarget, double argWeight)
    { target = argTarget; weight = argWeight; }
}

public class Dijkstras {

    public void computePaths(Vertex source) {
        source.minDistance = 0.;
        PriorityQueue<Vertex> vertexQueue = new PriorityQueue<Vertex>();
        vertexQueue.add(source);

        while (!vertexQueue.isEmpty()) {
            Vertex u = vertexQueue.poll();

            // Visit each edge exiting u
            for (Edge e : u.adjacencies) {
                Vertex v = e.target;
                double weight = e.weight;
                double distanceThroughU = u.minDistance + weight;
                if (distanceThroughU < v.minDistance) {
                    vertexQueue.remove(v);

                    v.minDistance = distanceThroughU;
                    v.previous = u;
                    vertexQueue.add(v);
                }
            }
        }

    } // end computePaths()

    public List<Vertex> getShortestPathTo(Vertex target) {
        List<Vertex> path = new ArrayList<Vertex>();
        for (Vertex vertex = target; vertex != null; vertex = vertex.previous)
            path.add(vertex);

        Collections.reverse(path);
        return path;
    }

} // end Dijkstras class


public static void main(String[] args)
    {
	// set verticies
        Vertex S = new Vertex("S");
        Vertex A = new Vertex("A");
        Vertex B = new Vertex("B");
        Vertex F = new Vertex("F");

        // set edges and weight
        S.adjacencies = new Edge[]{ new Edge(A, 6) };
        S.adjacencies = new Edge[]{ new Edge(B, 2) };
        A.adjacencies = new Edge[]{ new Edge(F, 1) };
        B.adjacencies = new Edge[]{ new Edge(A, 3) };
        B.adjacencies = new Edge[]{ new Edge(F, 5) };

        // run Dijkstra
        new Dijkstras().computePaths(S);
        System.out.println("Distance to " + F + ": " + F.minDistance);
        List<Vertex> path = new Dijkstras().getShortestPathTo(F);
        System.out.println("Path: " + path);
    }
}